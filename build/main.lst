     1                                  ; x86_64 Intel Assembly
     2                                  
     3                                  %include "include/debug.inc"
     4                              <1> ; Debugging utility macro functions
     5                              <1> %ifndef DEBUG_INC
     6                              <1> %define DEBUG_INC
     7                              <1> 
     8                              <1> section .data
     9 00000000 303132333435363738- <1>         hex_codes: db "0123456789ABCDEF"
     9 00000009 39414243444546      <1>
    10 00000010 0A                  <1>         newline_char: db 10
    11                              <1> section .bss
    12                              <1> section .text
    13                              <1>         global _deb_64_endline
    14                              <1>         global _deb_64_hex
    15                              <1> 
    16                              <1> _deb_32_endline:
    17 00000000 B801000000          <1>     mov eax, 1
    18 00000005 BF01000000          <1>     mov edi, 1
    19 0000000A BE[10000000]        <1>     mov esi, newline_char
    20 0000000F BA01000000          <1>     mov edx, 1
    21 00000014 0F05                <1>     syscall
    22 00000016 C3                  <1>     ret
    23                              <1> 
    24                              <1> _deb_64_endline:
    25 00000017 B801000000          <1>     mov rax, 1
    26 0000001C BF01000000          <1>     mov rdi, 1
    27 00000021 48BE-               <1>     mov rsi, newline_char
    27 00000023 [1000000000000000]  <1>
    28 0000002B BA01000000          <1>     mov rdx, 1
    29 00000030 0F05                <1>     syscall
    30 00000032 C3                  <1>     ret
    31                              <1> 
    32                              <1> ; _deb_32_hex:
    33                              <1> ;         mov eax, edi
    34                              <1> ;         mov edi, 1
    35                              <1> ;         mov edx, 1
    36                              <1> ;         mov ecx, 64     
    37                              <1> ; .iterate:
    38                              <1> ;         push eax
    39                              <1> ;         sub ecx, 4
    40                              <1> ;         sar eax, cl
    41                              <1> ;         and eax, 0xf
    42                              <1> ;         lea esi, [hex_codes + eax]
    43                              <1> ;         mov eax, 1
    44                              <1> ;         push ecx
    45                              <1> ;         syscall
    46                              <1> ;         pop ecx
    47                              <1> ;         pop eax
    48                              <1> ;         test ecx, ecx
    49                              <1> ;         jnz .iterate
    50                              <1> ;         ret
    51                              <1> 
    52                              <1> _deb_64_hex:
    53 00000033 4889F8              <1>         mov rax, rdi
    54 00000036 BF01000000          <1>         mov rdi, 1
    55 0000003B BA01000000          <1>         mov rdx, 1
    56 00000040 B940000000          <1>         mov rcx, 64     
    57                              <1> .iterate:
    58 00000045 50                  <1>         push rax
    59 00000046 4883E904            <1>         sub rcx, 4
    60 0000004A 48D3F8              <1>         sar rax, cl
    61 0000004D 4883E00F            <1>         and rax, 0xf
    62 00000051 488DB0[00000000]    <1>         lea rsi, [hex_codes + rax]
    63 00000058 B801000000          <1>         mov rax, 1
    64 0000005D 51                  <1>         push rcx
    65 0000005E 0F05                <1>         syscall
    66 00000060 59                  <1>         pop rcx
    67 00000061 58                  <1>         pop rax
    68 00000062 4885C9              <1>         test rcx, rcx
    69 00000065 75DE                <1>         jnz .iterate
    70 00000067 C3                  <1>         ret
    71                              <1> 
    72                              <1> %macro deb_32 1
    73                              <1>         mov edi, %1
    74                              <1>         call _deb_32_hex
    75                              <1>         call _deb_32_endline
    76                              <1> %endmacro
    77                              <1> %macro deb_64 1
    78                              <1>         mov rdi, %1
    79                              <1>         call _deb_64_hex
    80                              <1>         call _deb_64_endline
    81                              <1> %endmacro
    82                              <1> %macro deb_32_el 0
    83                              <1>         call _deb_32_endline
    84                              <1> %endmacro
    85                              <1> %macro deb_64_el 0
    86                              <1>         call _deb_64_endline
    87                              <1> %endmacro
    88                              <1> 
    89                              <1> %endif
     4                                  
     5                                  section .data
     6 00000011 25640A                          dec_fm: db "%d", 0x0a
     7                                  section .bss
     8                                  section .text
     9                                          extern printf
    10                                  
    11                                  global fibonacci
    12                                  fibonacci:
    13 00000068 4883FF00                        cmp rdi, 0              ; if (n <= 0)
    14 0000006C 7E34                            jle .c0
    15 0000006E 4883FF02                        cmp rdi, 2              ; if (n <= 2)
    16 00000072 7E28                            jle .c12
    17                                  
    18 00000074 B903000000                      mov rcx, 3              ; i = 3
    19 00000079 B802000000                      mov rax, 2              ; current = 1 (last1)
    20 0000007E BA01000000                      mov rdx, 1              ; last1 = 1
    21 00000083 BE01000000                      mov rsi, 1              ; last2 = 1
    22 00000088 EB0C                            jmp .cnd                
    23                                  .lp:
    24 0000008A 4889C2                          mov rdx, rax            ; last1 = current
    25 0000008D 4801F0                          add rax, rsi            ; current += last2
    26 00000090 4889D6                          mov rsi, rdx            ; last2 = last1
    27 00000093 48FFC1                          inc rcx                 ; ++i
    28                                          
    29                                  .cnd
    29          ******************       warning: label alone on a line without a colon might be in error [-w+label-orphan]
    30 00000096 4839F9                          cmp rcx, rdi
    31 00000099 75EF                            jne .lp
    32 0000009B C3                              ret
    33                                  .c12
    33          ******************       warning: label alone on a line without a colon might be in error [-w+label-orphan]
    34 0000009C B801000000                      mov rax, 1
    35 000000A1 C3                              ret
    36                                  .c0:
    37 000000A2 4831C0                          xor rax, rax
    38 000000A5 C3                              ret
    39                                  
    40                                  global main
    41                                  main:
    42 000000A6 55                              push rbp
    43 000000A7 4889E5                          mov rbp, rsp
    44                                  
    45 000000AA BFF4010000                      mov rdi, 500
    46 000000AF E8B4FFFFFF                      call fibonacci
    47                                  
    48 000000B4 488D3C25[11000000]              lea rdi, [dec_fm]
    49 000000BC 4889C6                          mov rsi, rax
    50 000000BF E8(00000000)                    call printf
    51                                  
    52 000000C4 5D                              pop rbp
    53 000000C5 B83C000000                      mov rax, 60
    54 000000CA 4831FF                          xor rdi, rdi
    55 000000CD 0F05                            syscall
