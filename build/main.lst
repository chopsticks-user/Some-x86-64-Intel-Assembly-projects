     1                                  ; x86_64 Intel Assembly
     2                                  
     3                                  %include "include/math.inc"
     4                              <1> ; Math utility macro functions
     5                              <1> %ifndef MATH_INC
     6                              <1> %define MATH_INC
     7                              <1> 
     8                              <1> section .data
     9                              <1> section .bss
    10                              <1> section .text
    11                              <1> 
    12                              <1> ; Perform the addition of 2 numbers and return the result to 
    13                              <1> ; either the register <eax> or <rax>
    14                              <1> %macro add_32 2
    15                              <1>         mov eax, %1
    16                              <1>         add eax, %2
    17                              <1> %endmacro
    18                              <1> %macro add_64 2
    19                              <1>         mov rax, %1
    20                              <1>         add rax, %2
    21                              <1> %endmacro
    22                              <1> 
    23                              <1> ; Perform the substraction of 2 numbers and return the result to 
    24                              <1> ; either the register <eax> or <rax>
    25                              <1> %macro sub_32 2
    26                              <1>         mov eax, %1
    27                              <1>         sub eax, %2
    28                              <1> %endmacro
    29                              <1> %macro sub_64 2
    30                              <1>         mov rax, %1
    31                              <1>         sub rax, %2
    32                              <1> %endmacro
    33                              <1> 
    34                              <1> ; Multiply 2 numbers and return the result to 
    35                              <1> ; either the register <eax> or <rax>
    36                              <1> %macro mul_32 2
    37                              <1>         mov eax, %1
    38                              <1>         imul eax, %2
    39                              <1> %endmacro
    40                              <1> %macro mul_64 2
    41                              <1>         mov rax, %1
    42                              <1>         imul rax, %2
    43                              <1> %endmacro
    44                              <1> 
    45                              <1> ; Devide %1 by %2
    46                              <1> %macro div_32 2
    47                              <1>         mov eax, %1
    48                              <1>         mov edi, %2
    49                              <1>         cdq
    50                              <1>         idiv edi
    51                              <1> %endmacro
    52                              <1> %macro div_64 2
    53                              <1>         mov rax, %1
    54                              <1>         mov rdi, %2
    55                              <1>         cdq
    56                              <1>         idiv rdi
    57                              <1> %endmacro
    58                              <1> 
    59                              <1> ; Find the absolute value of %1
    60                              <1> %macro abs_32 1
    61                              <1>         mov eax, %1
    62                              <1>         mov edx, eax
    63                              <1>         neg eax
    64                              <1>         cmovl eax, edx
    65                              <1> %endmacro
    66                              <1> %macro abs_64 1
    67                              <1>         mov rax, %1
    68                              <1>         mov rbx, rax
    69                              <1>         neg rax
    70                              <1>         cmovl rax, rbx
    71                              <1> %endmacro
    72                              <1> 
    73                              <1> global fibonacci
    74                              <1> fibonacci:
    75 00000000 4883FF00            <1>         cmp rdi, 0              ; if (n <= 0)
    76 00000004 7E34                <1>         jle .c0
    77 00000006 4883FF02            <1>         cmp rdi, 2              ; if (n <= 2)
    78 0000000A 7E28                <1>         jle .c12
    79                              <1> 
    80 0000000C B903000000          <1>         mov rcx, 3              ; i = 3
    81 00000011 B802000000          <1>         mov rax, 2              ; current = 1 (last1)
    82 00000016 BA01000000          <1>         mov rdx, 1              ; last1 = 1
    83 0000001B BE01000000          <1>         mov rsi, 1              ; last2 = 1
    84 00000020 EB0C                <1>         jmp .cnd                
    85                              <1> .lp:
    86 00000022 4889C2              <1>         mov rdx, rax            ; last1 = current
    87 00000025 4801F0              <1>         add rax, rsi            ; current += last2
    88 00000028 4889D6              <1>         mov rsi, rdx            ; last2 = last1
    89 0000002B 48FFC1              <1>         inc rcx                 ; ++i
    90                              <1>         
    91                              <1> .cnd
    91          ******************  <1>  warning: label alone on a line without a colon might be in error [-w+label-orphan]
    92 0000002E 4839F9              <1>         cmp rcx, rdi
    93 00000031 75EF                <1>         jne .lp
    94 00000033 C3                  <1>         ret
    95                              <1> .c12
    95          ******************  <1>  warning: label alone on a line without a colon might be in error [-w+label-orphan]
    96 00000034 B801000000          <1>         mov rax, 1
    97 00000039 C3                  <1>         ret
    98                              <1> .c0:
    99 0000003A 4831C0              <1>         xor rax, rax
   100 0000003D C3                  <1>         ret
   101                              <1> 
   102                              <1> %macro fib_64 1
   103                              <1>         mov rdi, %1
   104                              <1>         call fibonacci
   105                              <1> %endmacro
   106                              <1> 
   107                              <1> %endif
     4                                  
     5                                  section .data
     6 00000000 25640A                          dec_fm: db "%d", 0x0a
     7                                  section .bss
     8                                  section .text
     9                                          extern printf
    10                                  
    11                                  global main
    12                                  main:
    13 0000003E 55                              push rbp
    14 0000003F 4889E5                          mov rbp, rsp
    15                                  
    16                                          fib_64 500
   103 00000042 BFF4010000          <1>  mov rdi, %1
   104 00000047 E8B4FFFFFF          <1>  call fibonacci
    17                                  
    18 0000004C 488D3C25[00000000]              lea rdi, [dec_fm]
    19 00000054 4889C6                          mov rsi, rax
    20 00000057 E8(00000000)                    call printf
    21                                  
    22 0000005C 5D                              pop rbp
    23 0000005D B83C000000                      mov rax, 60
    24 00000062 4831FF                          xor rdi, rdi
    25 00000065 0F05                            syscall
